/**
 */
package de.dc.swtform.xcore.widget.provider;

import de.dc.swtform.xcore.widget.util.WidgetAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WidgetItemProviderAdapterFactory extends WidgetAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WidgetItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XButtonItemProvider xButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXButtonAdapter() {
		if (xButtonItemProvider == null) {
			xButtonItemProvider = new XButtonItemProvider(this);
		}

		return xButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XCheckButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XCheckButtonItemProvider xCheckButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XCheckButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXCheckButtonAdapter() {
		if (xCheckButtonItemProvider == null) {
			xCheckButtonItemProvider = new XCheckButtonItemProvider(this);
		}

		return xCheckButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XRadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XRadioButtonItemProvider xRadioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XRadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXRadioButtonAdapter() {
		if (xRadioButtonItemProvider == null) {
			xRadioButtonItemProvider = new XRadioButtonItemProvider(this);
		}

		return xRadioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XToogleButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XToogleButtonItemProvider xToogleButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XToogleButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXToogleButtonAdapter() {
		if (xToogleButtonItemProvider == null) {
			xToogleButtonItemProvider = new XToogleButtonItemProvider(this);
		}

		return xToogleButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XSpinner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XSpinnerItemProvider xSpinnerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XSpinner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXSpinnerAdapter() {
		if (xSpinnerItemProvider == null) {
			xSpinnerItemProvider = new XSpinnerItemProvider(this);
		}

		return xSpinnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XDateTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XDateTimeItemProvider xDateTimeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XDateTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXDateTimeAdapter() {
		if (xDateTimeItemProvider == null) {
			xDateTimeItemProvider = new XDateTimeItemProvider(this);
		}

		return xDateTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XToolBar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XToolBarItemProvider xToolBarItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XToolBar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXToolBarAdapter() {
		if (xToolBarItemProvider == null) {
			xToolBarItemProvider = new XToolBarItemProvider(this);
		}

		return xToolBarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XToolBarItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XToolBarItemItemProvider xToolBarItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XToolBarItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXToolBarItemAdapter() {
		if (xToolBarItemItemProvider == null) {
			xToolBarItemItemProvider = new XToolBarItemItemProvider(this);
		}

		return xToolBarItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XCoolBar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XCoolBarItemProvider xCoolBarItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XCoolBar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXCoolBarAdapter() {
		if (xCoolBarItemProvider == null) {
			xCoolBarItemProvider = new XCoolBarItemProvider(this);
		}

		return xCoolBarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XCoolBarItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XCoolBarItemItemProvider xCoolBarItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XCoolBarItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXCoolBarItemAdapter() {
		if (xCoolBarItemItemProvider == null) {
			xCoolBarItemItemProvider = new XCoolBarItemItemProvider(this);
		}

		return xCoolBarItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XBrowser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XBrowserItemProvider xBrowserItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XBrowser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXBrowserAdapter() {
		if (xBrowserItemProvider == null) {
			xBrowserItemProvider = new XBrowserItemProvider(this);
		}

		return xBrowserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XLinkItemProvider xLinkItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXLinkAdapter() {
		if (xLinkItemProvider == null) {
			xLinkItemProvider = new XLinkItemProvider(this);
		}

		return xLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XLabelItemProvider xLabelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXLabelAdapter() {
		if (xLabelItemProvider == null) {
			xLabelItemProvider = new XLabelItemProvider(this);
		}

		return xLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XCombo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XComboItemProvider xComboItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XCombo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXComboAdapter() {
		if (xComboItemProvider == null) {
			xComboItemProvider = new XComboItemProvider(this);
		}

		return xComboItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XComboItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XComboItemItemProvider xComboItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XComboItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXComboItemAdapter() {
		if (xComboItemItemProvider == null) {
			xComboItemItemProvider = new XComboItemItemProvider(this);
		}

		return xComboItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XTextItemProvider xTextItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXTextAdapter() {
		if (xTextItemProvider == null) {
			xTextItemProvider = new XTextItemProvider(this);
		}

		return xTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XComposite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XCompositeItemProvider xCompositeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XComposite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXCompositeAdapter() {
		if (xCompositeItemProvider == null) {
			xCompositeItemProvider = new XCompositeItemProvider(this);
		}

		return xCompositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XGroupItemProvider xGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXGroupAdapter() {
		if (xGroupItemProvider == null) {
			xGroupItemProvider = new XGroupItemProvider(this);
		}

		return xGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XScrolledComposite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XScrolledCompositeItemProvider xScrolledCompositeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XScrolledComposite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXScrolledCompositeAdapter() {
		if (xScrolledCompositeItemProvider == null) {
			xScrolledCompositeItemProvider = new XScrolledCompositeItemProvider(this);
		}

		return xScrolledCompositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XTabFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XTabFolderItemProvider xTabFolderItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XTabFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXTabFolderAdapter() {
		if (xTabFolderItemProvider == null) {
			xTabFolderItemProvider = new XTabFolderItemProvider(this);
		}

		return xTabFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XTabItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XTabItemItemProvider xTabItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XTabItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXTabItemAdapter() {
		if (xTabItemItemProvider == null) {
			xTabItemItemProvider = new XTabItemItemProvider(this);
		}

		return xTabItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XCTabFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XCTabFolderItemProvider xcTabFolderItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XCTabFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXCTabFolderAdapter() {
		if (xcTabFolderItemProvider == null) {
			xcTabFolderItemProvider = new XCTabFolderItemProvider(this);
		}

		return xcTabFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XCTabItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XCTabItemItemProvider xcTabItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XCTabItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXCTabItemAdapter() {
		if (xcTabItemItemProvider == null) {
			xcTabItemItemProvider = new XCTabItemItemProvider(this);
		}

		return xcTabItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XLabelProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XLabelProviderItemProvider xLabelProviderItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XLabelProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXLabelProviderAdapter() {
		if (xLabelProviderItemProvider == null) {
			xLabelProviderItemProvider = new XLabelProviderItemProvider(this);
		}

		return xLabelProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XContentProviderItemProvider xContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXContentProviderAdapter() {
		if (xContentProviderItemProvider == null) {
			xContentProviderItemProvider = new XContentProviderItemProvider(this);
		}

		return xContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XTableViewer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XTableViewerItemProvider xTableViewerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XTableViewer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXTableViewerAdapter() {
		if (xTableViewerItemProvider == null) {
			xTableViewerItemProvider = new XTableViewerItemProvider(this);
		}

		return xTableViewerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XTableViewerColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XTableViewerColumnItemProvider xTableViewerColumnItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XTableViewerColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXTableViewerColumnAdapter() {
		if (xTableViewerColumnItemProvider == null) {
			xTableViewerColumnItemProvider = new XTableViewerColumnItemProvider(this);
		}

		return xTableViewerColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XTreeViewer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XTreeViewerItemProvider xTreeViewerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XTreeViewer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXTreeViewerAdapter() {
		if (xTreeViewerItemProvider == null) {
			xTreeViewerItemProvider = new XTreeViewerItemProvider(this);
		}

		return xTreeViewerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XListViewer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XListViewerItemProvider xListViewerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XListViewer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXListViewerAdapter() {
		if (xListViewerItemProvider == null) {
			xListViewerItemProvider = new XListViewerItemProvider(this);
		}

		return xListViewerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.swtform.xcore.widget.XComboViewer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XComboViewerItemProvider xComboViewerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.swtform.xcore.widget.XComboViewer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXComboViewerAdapter() {
		if (xComboViewerItemProvider == null) {
			xComboViewerItemProvider = new XComboViewerItemProvider(this);
		}

		return xComboViewerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (xButtonItemProvider != null) xButtonItemProvider.dispose();
		if (xCheckButtonItemProvider != null) xCheckButtonItemProvider.dispose();
		if (xRadioButtonItemProvider != null) xRadioButtonItemProvider.dispose();
		if (xToogleButtonItemProvider != null) xToogleButtonItemProvider.dispose();
		if (xSpinnerItemProvider != null) xSpinnerItemProvider.dispose();
		if (xDateTimeItemProvider != null) xDateTimeItemProvider.dispose();
		if (xToolBarItemProvider != null) xToolBarItemProvider.dispose();
		if (xToolBarItemItemProvider != null) xToolBarItemItemProvider.dispose();
		if (xCoolBarItemProvider != null) xCoolBarItemProvider.dispose();
		if (xCoolBarItemItemProvider != null) xCoolBarItemItemProvider.dispose();
		if (xBrowserItemProvider != null) xBrowserItemProvider.dispose();
		if (xLinkItemProvider != null) xLinkItemProvider.dispose();
		if (xLabelItemProvider != null) xLabelItemProvider.dispose();
		if (xComboItemProvider != null) xComboItemProvider.dispose();
		if (xComboItemItemProvider != null) xComboItemItemProvider.dispose();
		if (xTextItemProvider != null) xTextItemProvider.dispose();
		if (xCompositeItemProvider != null) xCompositeItemProvider.dispose();
		if (xGroupItemProvider != null) xGroupItemProvider.dispose();
		if (xScrolledCompositeItemProvider != null) xScrolledCompositeItemProvider.dispose();
		if (xTabFolderItemProvider != null) xTabFolderItemProvider.dispose();
		if (xTabItemItemProvider != null) xTabItemItemProvider.dispose();
		if (xcTabFolderItemProvider != null) xcTabFolderItemProvider.dispose();
		if (xcTabItemItemProvider != null) xcTabItemItemProvider.dispose();
		if (xLabelProviderItemProvider != null) xLabelProviderItemProvider.dispose();
		if (xContentProviderItemProvider != null) xContentProviderItemProvider.dispose();
		if (xTableViewerItemProvider != null) xTableViewerItemProvider.dispose();
		if (xTableViewerColumnItemProvider != null) xTableViewerColumnItemProvider.dispose();
		if (xTreeViewerItemProvider != null) xTreeViewerItemProvider.dispose();
		if (xListViewerItemProvider != null) xListViewerItemProvider.dispose();
		if (xComboViewerItemProvider != null) xComboViewerItemProvider.dispose();
	}

}
